import{_ as s,o as a,c as l,N as n}from"./chunks/framework.5124499d.js";const d=JSON.parse('{"title":"React介绍","description":"","frontmatter":{"title":"React介绍","publish":true},"headers":[],"relativePath":"react/index.md"}'),p={name:"react/index.md"},o=n(`<h2 id="虚拟dom和diff算法" tabindex="-1">虚拟DOM和diff算法 <a class="header-anchor" href="#虚拟dom和diff算法" aria-label="Permalink to &quot;虚拟DOM和diff算法&quot;">​</a></h2><blockquote><p>在学习 React 之前，我们需要先了解两个概念：虚拟DOM、diff算法。</p></blockquote><h3 id="虚拟dom" tabindex="-1">虚拟DOM <a class="header-anchor" href="#虚拟dom" aria-label="Permalink to &quot;虚拟DOM&quot;">​</a></h3><p><strong>问题描述</strong>：</p><p>假设我们的数据发生一点点的变化，也会被强制重建整颗DOM树，这么做，会涉及到很多元素的重绘和重排，导致性能浪费严重。</p><p><strong>解决上述问题的思路</strong>：</p><p>实现按需更新页面上的元素即可。也就是说，把 需要修改的元素，所对应的 DOM 元素重新构建；其他没有变化的数据，所对应的 DOM 节点不需要被强制更新。</p><p><strong>具体实现方案</strong>：（如何按需更新页面上的元素）</p><p>只需要拿到 页面更新前的 内存中的DOM树，同时再拿到 页面更新前的 新渲染出来的 内存DOM树；然后，对比这两颗新旧DOM树，找到那些需要被重新创建和修改的元素即可。这样就能实现 DOM 的<strong>按需更新</strong>。</p><p><strong>如何拿到这两棵DOM树</strong>：（即：如何从浏览器的内存住哪个获取到 浏览器私有的那两颗DOM树？）</p><p>如果要拿到浏览器私有的DOM树，那我们必须调用浏览器提供的相关JS的API才行。但是问题来了，浏览器并没有提供这样的API。既然如此，那我们可以自己<strong>模拟</strong>这两颗 新旧DOM树。</p><p><strong>如何自己模拟这两颗 新旧DOM树</strong>：（即：如何自己模拟一个DOM节点？）</p><p>这里涉及到手动模拟DOM树的原理：使用 JS 创建一个对象，用和这个对象来模拟每一个DOM节点；然后在每个DOM节点中，又提供了类似于 children 这样的属性来描述当前DOM的子节点。这样的话，当DOM节点形成了嵌套关系，就模拟出了一颗 DOM 树。</p><p><strong>总结</strong>：</p><ul><li><p>虚拟DOM的<strong>本质</strong>：使用 JS 对象模拟DOM树。</p></li><li><p>虚拟DOM的<strong>目的</strong>：为了实现 DOM 节点的高效更新。</p></li></ul><p>React内部已经帮我们实现了虚拟DOM，初学者掌握如何调用即可。</p><h3 id="diff算法" tabindex="-1">diff算法 <a class="header-anchor" href="#diff算法" aria-label="Permalink to &quot;diff算法&quot;">​</a></h3><p>怎么实现 两颗新旧DOM树的对比 呢？这里就涉及到了 diff算法。常见的 diff算法如下：</p><ul><li><p>tree diff：新旧DOM树，逐层对比的方式，就叫做 tree diff。每当我们从前到后，把所有层的节点对比完后，必然能够找到那些 需要被更新的元素。</p></li><li><p>component diff：在对比每一层的时候，组件之间的对比，叫做 component diff。当对比组件的时候，如果两个组件的类型相同，则暂时认为这个组件不需要被更新，如果组件的类型不同，则立即将旧组件移除，新建一个组件，替换到被移除的位置。</p></li><li><p>element diff：在组件中，每个元素之间也要进行对比，那么，元素级别的对比，叫做 element diff。</p></li><li><p>key：key这个属性，可以把 页面上的 DOM节点 和 虚拟DOM中的对象，做一层关联关系。</p></li></ul><h2 id="react-介绍" tabindex="-1">React 介绍 <a class="header-anchor" href="#react-介绍" aria-label="Permalink to &quot;React 介绍&quot;">​</a></h2><h3 id="react-是什么" tabindex="-1">React 是什么 <a class="header-anchor" href="#react-是什么" aria-label="Permalink to &quot;React 是什么&quot;">​</a></h3><ul><li><p>Facebook 开源的一个JS库。</p></li><li><p>一个用于动态构建用户界面的JS库。</p></li></ul><h3 id="react-的特点" tabindex="-1">React 的特点 <a class="header-anchor" href="#react-的特点" aria-label="Permalink to &quot;React 的特点&quot;">​</a></h3><ul><li><p>Declarative（声明式编码）</p></li><li><p>Component-Based（组件化编码）</p></li><li><p>Learn Once, Write Anywhere（支持客户端、服务器端渲染）</p></li><li><p>高效的DOM Diff算法，最小化页面重绘</p></li><li><p>单向数据流</p></li></ul><h3 id="react高效的原因" tabindex="-1">React高效的原因 <a class="header-anchor" href="#react高效的原因" aria-label="Permalink to &quot;React高效的原因&quot;">​</a></h3><ul><li><p>虚拟(virtual)DOM，不总是直接操作DOM</p></li><li><p>高效的DOM Diff算法，最小化页面重绘（即“局部渲染”）。</p></li></ul><p>虚拟DOM指的是：在真实DOM的上一层<strong>映射</strong>一层虚拟DOM。我们操作的是映射关系，而不是真实的DOM。假设页面的样式做了修改（比如新增了一个标签），此时修改的是虚拟DOM的样式，真实的DOM并未发生变化。那什么时候，真实的DOM会发生变化呢？ 当我把所有的内容操作完之后，转化为真实的DOM，此时要打包统一的渲染页面，于是真实的DOM发生变化，然后渲染一次。 这样做的话，可以减少页面的渲染次数。</p><h3 id="相关网址" tabindex="-1">相关网址 <a class="header-anchor" href="#相关网址" aria-label="Permalink to &quot;相关网址&quot;">​</a></h3><ul><li><p>官网：<a href="https://reactjs.org/" target="_blank" rel="noreferrer">https://reactjs.org/</a></p></li><li><p>GitHub 地址：<a href="https://github.com/facebook/react" target="_blank" rel="noreferrer">https://github.com/facebook/react</a> 截至2019-02-08，React项目已经有 121k 的star。</p></li></ul><p>官网截图：</p><p>20190208_1057.png</p><p>上方截图中，有一个特性是“Learn Once, Write Anywhere”。这里的 “Anywhere” 其实指的是两个地方：一个是浏览器端，一个是服务器端。后者指的是，<strong>React支持在服务器端渲染页面</strong>。</p><h3 id="生态介绍" tabindex="-1">生态介绍 <a class="header-anchor" href="#生态介绍" aria-label="Permalink to &quot;生态介绍&quot;">​</a></h3><ul><li><p>Vue生态：Vue + Vue-Router + Vuex + Axios + Babel + Webpack</p></li><li><p>React生态：React + React-Router + Redux + Axios + Babel + Webpack</p></li></ul><h2 id="react-模块化、组件化" tabindex="-1">React 模块化、组件化 <a class="header-anchor" href="#react-模块化、组件化" aria-label="Permalink to &quot;React 模块化、组件化&quot;">​</a></h2><h3 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h3><ul><li><p>理解：向外提供特定功能的js程序, 一般就是一个js文件</p></li><li><p>理由：js代码更多更复杂</p></li><li><p>作用：简化js的编写，阅读，提高运行效率</p></li></ul><h3 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h3><ul><li><p>理解：用来实现特定功能效果的代码集合(html/css/js)</p></li><li><p>理由：一个界面的功能更复杂</p></li><li><p>作用：复用，简化项目编码，提高运行效率</p></li></ul><h3 id="模块化与组件化" tabindex="-1">模块化与组件化 <a class="header-anchor" href="#模块化与组件化" aria-label="Permalink to &quot;模块化与组件化&quot;">​</a></h3><ul><li><p>模块化：当应用的js都以模块来编写的, 这个应用就是一个模块化的应用</p></li><li><p>组件化：当应用是以多组件的方式实现功能, 这上应用就是一个组件化的应用</p></li></ul><h3 id="面相对象与面向过程的区别" tabindex="-1">面相对象与面向过程的区别 <a class="header-anchor" href="#面相对象与面向过程的区别" aria-label="Permalink to &quot;面相对象与面向过程的区别&quot;">​</a></h3><p>面向对象编程：</p><ul><li><p>重点是对象</p></li><li><p>更加关心的是干活的人</p></li></ul><p>面向过程编程：</p><ul><li><p>更加关心的是干活的过程</p></li><li><p>谁去干活儿不关心</p></li></ul><h2 id="react-环境搭建-写第一个hello-world" tabindex="-1">React 环境搭建：写第一个Hello World <a class="header-anchor" href="#react-环境搭建-写第一个hello-world" aria-label="Permalink to &quot;React 环境搭建：写第一个Hello World&quot;">​</a></h2><h3 id="react-js-和-react-dom-js" tabindex="-1">react.js 和 react-dom.js <a class="header-anchor" href="#react-js-和-react-dom-js" aria-label="Permalink to &quot;react.js 和 react-dom.js&quot;">​</a></h3><p>为了通过 React 写一个Hello World程序，我们需要先安装几个包：</p><ul><li><p>react.js: React的核心库。这个包，是专门用来创建React组件、组件生命周期等。</p></li><li><p>react-dom.js: 操作DOM的扩展库。这个包，主要封装了和 DOM 操作相关的包（比如，把组件渲染到页面上）。</p></li><li><p>babel.min.js: 将 JSX语法 解析为 纯JS语法代码。</p></li></ul><h3 id="方式一-本地引入相关的js库" tabindex="-1">方式一：本地引入相关的js库 <a class="header-anchor" href="#方式一-本地引入相关的js库" aria-label="Permalink to &quot;方式一：本地引入相关的js库&quot;">​</a></h3><p>入门的时候，我们建议采取方式一。</p><p>如果是本地引入的话，可以这样写：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 引入React相关的js库 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./libs/react.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./libs/react-dom.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./libs/babel.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>如果是通过CDN的方式引入的话，可以使用网站 <a href="https://www.bootcdn.cn/" target="_blank" rel="noreferrer">https://www.bootcdn.cn/</a> 提供的CDN链接。</p><p><strong>完整代码举例</strong>：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Document</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 引入React相关的js库 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./libs/react.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./libs/react-dom.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./libs/babel.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myContainer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 注意，这一行的 type 是写 &quot;text/babel&quot;，而不是 &quot;text/javascript&quot; --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/babel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//页面中的真实容器元素</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> containDiv </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myContainer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//1、创建虚拟DOM对象</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> vDom </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello, React!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 不是字符串, 不能加引号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//2、渲染虚拟DOM对象（将虚拟DOM对象渲染到页面元素中）</span></span>
<span class="line"><span style="color:#A6ACCD;">      ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(vDom</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> containDiv)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 参数1：虚拟DOM对象；参数2：页面中的容器</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>代码运行后，页面上的DOM结构如下：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myContainer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello, React!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><strong>代码解释</strong>：</p><p>render的中文含义是“渲染”。render 方法的语法如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(要渲染的虚拟DOM对象</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 容器 container：要渲染到页面上的哪个位置)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>工程文件：</p><ul><li><a href="https://github.com/qianguyihao/web-resource/blob/main/project/2019-02-08-ReactDemo.zip" target="_blank" rel="noreferrer">2019-02-08-ReactDemo.zip</a></li></ul><h3 id="方式二-npm-install" tabindex="-1">方式二：npm install <a class="header-anchor" href="#方式二-npm-install" aria-label="Permalink to &quot;方式二：npm install&quot;">​</a></h3><p>实际开发中，我们一般都是通过 npm install 的方式来安装 react 相关的包。</p><p>首先，新建一个空的文件夹<code>2019-02-08-ReactDemo</code>，作为项目的根目录。然后在根目录下执行如下命令，进行<strong>项目初始化</strong>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  npm init --yes</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上方命令执行完成后，会生成<code>package.json</code>文件。</p><p>然后继续执行如下命令，安装 react.js 和 react-dom.js 这两个包：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  npm i react react-dom</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>完整代码举例：</p><p>index.html:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>main.js:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JS打包入口文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> ReactDOM </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-dom</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在 react 中，如要要创建 DOM 元素，只能使用 React 提供的 JS API 来创建，不能【直接】像 Vue 中那样，手写 HTML 元素</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// React.createElement() 方法，用于创建 虚拟DOM 对象，它接收 3个及以上的参数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     参数1： 是个字符串类型的参数，表示要创建的元素类型</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     参数2： 是一个属性对象，表示 创建的这个元素上，有哪些属性</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     参数3： 从第三个参数的位置开始，后面可以放好多的虚拟DOM对象，这写参数，表示当前元素的子节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &lt;div title=&quot;this is a div&quot; id=&quot;mydiv&quot;&gt;这是一个div&lt;/div&gt;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myDiv </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">this is a div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mydiv</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">这是一个div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ReactDOM.render(&#39;要渲染的虚拟DOM元素&#39;, &#39;要渲染到页面上的哪个位置&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">ReactDOM</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(myDiv</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上方代码中，createElement()方法介绍如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(需要创建的元素类型</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 有哪些属性</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 子节点)</span></span>
<span class="line"></span></code></pre></div><p>工程文件：</p><ul><li><a href="https://github.com/qianguyihao/web-resource/blob/main/project/2019-02-09-ReactDemo.zip" target="_blank" rel="noreferrer">2019-02-09-ReactDemo.zip</a></li></ul>`,80),t=[o];function e(c,r,D,i,y,F){return a(),l("div",null,t)}const A=s(p,[["render",e]]);export{d as __pageData,A as default};
