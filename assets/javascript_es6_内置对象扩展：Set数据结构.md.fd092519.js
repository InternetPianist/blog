import{_ as a,o as n,c as o,C as t,N as l,D as e}from"./chunks/framework.5124499d.js";const _=JSON.parse('{"title":"内置对象扩展：Set数据结构","description":"","frontmatter":{"title":"内置对象扩展：Set数据结构","publish":true},"headers":[],"relativePath":"javascript/es6/内置对象扩展：Set数据结构.md"}'),p={name:"javascript/es6/内置对象扩展：Set数据结构.md"},c=l(`<h1 id="set-数据结构" tabindex="-1">Set 数据结构 <a class="header-anchor" href="#set-数据结构" aria-label="Permalink to &quot;Set 数据结构&quot;">​</a></h1><h2 id="set-数据结构的介绍" tabindex="-1">Set 数据结构的介绍 <a class="header-anchor" href="#set-数据结构的介绍" aria-label="Permalink to &quot;Set 数据结构的介绍&quot;">​</a></h2><p>ES6 提供了 新的数据结构 Set。Set 类似于<strong>数组</strong>，但成员的值都是<strong>唯一</strong>的，没有重复的值。</p><p>Set 的应用有很多。比如，在 H5 页面的搜索功能里，用户可能会多次搜索重复的关键字；但是在数据存储上，不需要存储重复的关键字。此时，我们就可以用 Set 来存储用户的搜索记录，Set 内部会自动判断值是否重复，如果重复，则不会进行存储，十分方便。</p><h2 id="生成-set-数据结构" tabindex="-1">生成 Set 数据结构 <a class="header-anchor" href="#生成-set-数据结构" aria-label="Permalink to &quot;生成 Set 数据结构&quot;">​</a></h2><p>Set 本身就是一个构造函数，可通过 <code>new Set()</code> 生成一个 Set 的实例。</p><p>举例 1：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> set1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(set1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 打印结果：0</span></span>
<span class="line"></span></code></pre></div><p><strong>举例 2</strong>、可以接收一个<strong>数组</strong>作为参数，实现<strong>数组去重</strong>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> set2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">王五</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 注意，这个数组里有重复的值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注意，这里的 set2 并不是数组，而是一个单纯的 Set 数据结构</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(set2)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// {&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 通过扩展运算符，拿到 set 中的元素（用逗号分隔的序列）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...set2 //  &quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注意，到这一步，才获取到了真正的数组</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">set2])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;]</span></span>
<span class="line"></span></code></pre></div><p>注意上方的第一行代码，虽然参数里传递的是数组结构，但拿到的 <code>set2</code> 不是数组结构，而是 Set 结构，而且里面元素是去重了的。通过 <code>[...set2]</code>就可以拿到<code>set2</code>对应的数组。</p>`,11);function r(D,y,i,A,C,F){const s=e("ArticleTopAd");return n(),o("div",null,[t(s),c])}const u=a(p,[["render",r]]);export{_ as __pageData,u as default};
